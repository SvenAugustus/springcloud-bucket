server:
  port: 2021

# 订阅消费的服务名
application.subscribe-provider.serviceId.serviceA: sample-hystrix-test-provider
application.subscribe-provider.serviceId.serviceB: sample-hystrix-test-provider-b

spring:
  application:
    name: sample-hystrix-test-consumer-fn

  cloud:
    loadbalancer:
      ribbon:
        enabled: true

# hystrix，熔断器
hystrix:
  # com.netflix.hystrix.HystrixCommandProperties
  command:
    default:
      execution:
        isolation:
          # 该属性用来设置HystrixCommand.run()执行的隔离策略。默认为THREAD。 THREAD / SEMAPHORE
          strategy: THREAD
          thread:
            # 该属性用来配置 HystrixCommand 执行的超时时间，单位为毫秒, 默认1秒
            timeoutInMilliseconds: 1000
          semaphore:
            # 当HystrixCommand命令的隔离策略使用信号量时，该属性用来配置信号量的大小。
            # 当最大并发请求达到该设置值时，后续的请求将被拒绝。
            maxConcurrentRequests: 10
        timeout:
          # 该属性用来配置HystrixCommand.run()的执行是否启用超时时间。默认为true。
          enabled: true
      fallback:
        isolation:
          semaphore:
            # 该属性用来设置从调用线程中允许HystrixCommand.getFallback()方法执行的最大并发请求数。
            # 当达到最大并发请求时，后续的请求将会被拒绝并抛出异常。
            maxConcurrentRequests: 10
      circuitBreaker:
        # 熔断器在整个统计时间内是否开启的阀值，默认20。
        # 也就是在 metrics.rollingStats.timeInMilliseconds（默认10s）内至少请求20次，熔断器才发挥起作用
        requestVolumeThreshold: 20
        # 默认:50%。当出错率超过50%后, 就把断路器设置为“打开”状态，否则就设置为“关闭”状态。
        errorThresholdPercentage: 50
        # 熔断时间窗口，单位毫秒，默认:5秒.熔断器中断请求5秒后会进入“半开”状状态,放下一个请求进来重试，
        # 如果依然时候就将断路器继续设置为“打开”状态，如果成功，就设置为“关闭”状态。
        sleepWindowInMilliseconds: 5000
      metrics:
        rollingStats:
          #  统计滚动的时间窗口,默认:10秒（取自circuitBreakerSleepWindowInMilliseconds）
          # 该时间用于断路器判断健康度时需要收集信息的持续时间。
          # 断路器在收集指标信息时会根据设置的时间窗长度拆分成多个桶来累计各度量值，每个桶记录了一段时间的采集指标。
          # 例如，当为默认值10000毫秒时，断路器默认将其分成10个桶，每个桶记录1000毫秒内的指标信息。
          timeInMilliseconds: 10000
  # com.netflix.hystrix.HystrixThreadPoolProperties
  threadpool:
    default:
      # 配置线程池大小,默认值10个
      coreSize: 10
      maximumSize: 10
      # 配置线程值等待队列长度,默认值:-1 建议值:-1表示不等待直接拒绝,
      # 测 试表明线程池使用直接决绝策略+ 合适大小的非回缩线程池效率最高.所以不建议修改此值。
      # 当使用非回缩线程池时，queueSizeRejectionThreshold,keepAliveTimeMinutes 参数无效
#      maxQueueSize: -1
#      queueSizeRejectionThreshold: 1000

# feign, 服务间调用
feign:
  hystrix:
    enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      ##默认是never
      show-details: ALWAYS
      enabled: true